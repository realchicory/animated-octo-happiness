{
 "metadata": {
  "name": "",
  "signature": "sha256:765c9dcdfe5a558a1ecf6457d28361348e27e4021ce001c3e3559732ed91d1f3"
 },
 "nbformat": 3,
 "nbformat_minor": 0,
 "worksheets": [
  {
   "cells": [
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import pandas as pd\n",
      "import datetime as dt\n",
      "import numpy as np\n",
      "import matplotlib.pyplot as plt\n",
      "%pylab inline"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Populating the interactive namespace from numpy and matplotlib\n"
       ]
      }
     ],
     "prompt_number": 25
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "data=pd.read_excel('/home/andrew/Documents/sample.xlsx', 'Sheet1', indexcol='Date')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 26
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "data.index=data['Date']"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 27
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "data.pivot_table(values='Quantity',aggfunc=np.sum,index='Material',)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 28,
       "text": [
        "Material\n",
        "1234-02     113\n",
        "5565-06      58\n",
        "9876-04     189\n",
        "Name: Quantity, dtype: int64"
       ]
      }
     ],
     "prompt_number": 28
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "data['Year']=data.index.year"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 29
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "data['Month']=data.index.month"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 30
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "print \"Monthly Summary\"\n",
      "monthly=data.pivot_table(values='Quantity',aggfunc=np.sum,index='Material',columns=['Year','Month'])\n",
      "monthly"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Monthly Summary\n"
       ]
      },
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr>\n",
        "      <th>Year</th>\n",
        "      <th colspan=\"5\" halign=\"left\">2014</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Month</th>\n",
        "      <th>1</th>\n",
        "      <th>2</th>\n",
        "      <th>4</th>\n",
        "      <th>5</th>\n",
        "      <th>6</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Material</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>1234-02</th>\n",
        "      <td>  9</td>\n",
        "      <td>  60</td>\n",
        "      <td> 20</td>\n",
        "      <td>  0</td>\n",
        "      <td> 24</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5565-06</th>\n",
        "      <td>  6</td>\n",
        "      <td>  28</td>\n",
        "      <td>  5</td>\n",
        "      <td> 10</td>\n",
        "      <td>  9</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>9876-04</th>\n",
        "      <td> 13</td>\n",
        "      <td> 109</td>\n",
        "      <td>  0</td>\n",
        "      <td> 12</td>\n",
        "      <td> 55</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 31,
       "text": [
        "Year      2014                 \n",
        "Month        1    2   4   5   6\n",
        "Material                       \n",
        "1234-02      9   60  20   0  24\n",
        "5565-06      6   28   5  10   9\n",
        "9876-04     13  109   0  12  55"
       ]
      }
     ],
     "prompt_number": 31
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "data.plot(kind='bar',stacked=True, x=[data.index.year,data.index.month], y='Quantity')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 32,
       "text": [
        "<matplotlib.axes._subplots.AxesSubplot at 0x7f3dc2c46e90>"
       ]
      },
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\nRK5CYII=\n",
       "text": [
        "<matplotlib.figure.Figure at 0x7f3dc2c54e90>"
       ]
      }
     ],
     "prompt_number": 32
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "plt.show()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 33
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "grouped=data.groupby(['Year','Month']).sum()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 34
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "grouped"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th>Quantity</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Year</th>\n",
        "      <th>Month</th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th rowspan=\"5\" valign=\"top\">2014</th>\n",
        "      <th>1</th>\n",
        "      <td>  28</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2</th>\n",
        "      <td> 197</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4</th>\n",
        "      <td>  25</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5</th>\n",
        "      <td>  22</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6</th>\n",
        "      <td>  88</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 35,
       "text": [
        "            Quantity\n",
        "Year Month          \n",
        "2014 1            28\n",
        "     2           197\n",
        "     4            25\n",
        "     5            22\n",
        "     6            88"
       ]
      }
     ],
     "prompt_number": 35
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "monthgraph=grouped.plot(kind='bar')\n"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "iVBORw0KGgoAAAANSUhEUgAAAXIAAAEyCAYAAADnfFtlAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAHXtJREFUeJzt3X+QXXWZ5/H3Q4AASSBhQyWRMHTAIGZEQ7nissBujyPK\nWENgCBOIEDuQktpiNuIUUAQXN6yzRsTJrDWlM4U7QMIwIiDC4ChBcXNWHJA4SibEDPJDmiJIwiRk\nQgKlG8izf9yT/p60fW9353b393vP9/OqulX3nHN/PP3JuU9OP33uvebuiIhI5zoodgEiItIeNXIR\nkQ6nRi4i0uHUyEVEOpwauYhIh1MjFxHpcC0buZkdZ2ZrzeznZrbRzD5Vrj/azL5vZs+Y2ffMbHLl\nPteb2bNm9rSZfWS0fwARkdxZq/PIzWw6MN3d15vZROCnwPnAZcA2d7/ZzK4Dprj7MjObA3wd+ABw\nLPAIcJK77x3tH0REJFctj8jdfYu7ry+v7wb+hUaDngesLm+2mkZzBzgPuMvd97h7L/AccNoo1C0i\nIqUhz8jNrAs4FXgCmObuW8tNW4Fp5fV3AJsrd9tMo/GLiMgoGVIjL8cq9wFXufuu6jZvzGZavc9f\nnwEgIjKKDh7sBmZ2CI0m/rfu/kC5equZTXf3LWY2A3i1XP8ycFzl7jPLdf0fU81dROQAuLv1XzfY\nWSsG3ApscvcvVzY9CPSU13uAByrrLzazQ81sFjAbWNekmKiX5cuXR68hlYuyUBbKojOyaGawI/Iz\ngEuBDWb2ZLnueuAm4B4zWwL0AgvK5rzJzO4BNgFvAVd6q2ePqLe3N3YJyVAWgbIIlEWQehYtG7m7\n/4jmR+0fbnKfFcCKNuuSYWj84tSe1atXD36jQST6f7ZI7WX7zs7FixfHLmGEeRuXtW3evz4NvH77\nxYFTFkHqWbR8Q9CoPalZqhOXjtQ4Io+dp+mIXGSUmRk+3D921llRFLFLSEgRu4BkaL8IzEyXiJfh\nGPT0QxHJl37LimO4jVyjlRrQaEVGQ/lrfOwystQse41WRERqKttGrlloVRG7gGRov5BOlG0jFxEZ\nSZMmTYr2xqFsG3l3d3fsEhLSHbuAZGi/aC21szVWrVrFKaecwoQJE5gxYwZXXnklO3fuHKWfPuju\n7ubWW2/db92uXbvo6uoCGuedf/aznx31OvbJtpGLyIFq981jI/PGspUrV7Js2TJWrlzJ66+/zo9/\n/GNefPFFzj77bPbs2dP2T9nKcP/DGXWRPvjFY1u7dm3sEkYM4OBtXNa2ef9GDXVQp/2iXQP9m7a/\nr43MfrRz506fOHGi33vvvfut3717tx9zzDF+2223eU9Pj99www1929auXeszZ87sW/7CF77gJ554\nok+aNMnnzJnj999/f9+222+/3c844wy/5pprfMqUKT5r1ix/6KGH3N39M5/5jI8bN84PO+wwnzhx\noi9dutTd3c3Mn3vuOb/lllv8kEMO8UMPPdQnTpzo5557rn/pS1/y+fPn71fr0qVL/aqrrhpy9pX1\nv9VTdR65iHScxx57jF//+tdccMEF+62fMGECH/vYx3jkkUc49NBDWz7GO9/5Tn70ox8xffp07rnn\nHi699FKef/55pk1rfE/OunXruOyyy9i+fTu33HILS5Ys4eWXX+bzn/88jz32GIsWLeLyyy/f7zHN\njCuuuILHH3+c4447js997nMAbNmyhRtvvJGdO3dy1FFH8dZbb3H33XezZs2aEckj29GKZqFV3bEL\nSIb2i86wbds2pk6dykEH/XYLmzFjBtu2bRv0MS688EKmT58OwIIFC5g9ezZPPPFE3/bjjz+eJUuW\nYGZ84hOf4JVXXuHVV1/t2+6DnGNf3T59+nTOOuss7r33XgDWrFnDMcccw6mnnjponUORbSMXkc41\ndepUtm3bxt69v/297r/61a/6jqpbueOOOzj11FOZMmUKU6ZMYePGjWzfvr1v+74mD3DEEUcAsHv3\n7r51w52T9/T0cOeddwJw5513smjRomHdv5VsG7nOF64qYheQDO0XneH0009n/Pjx3Hffffut3717\nN2vWrOGjH/0oEyZM4M033+zbtmXLlr7rL774IldccQVf/epXee2119ixYwfvec97hvxO1sGa+EDb\nzzvvPDZs2MDGjRv5zne+wyWXXDKk5xqKbBu5iHSuo446iuXLl7N06VIefvhh9uzZQ29vLwsWLODE\nE0/koosuYu7cuXz3u99lx44dbNmyhS9/OXzJ2RtvvIGZMXXqVPbu3cvtt9/Oxo0bh/z806ZN4/nn\nn2+5/Ze//OV+6w4//HDmz5/Pxz/+cT74wQ8yc+bM4f/gTWTbyDULreqOXUAytF8MhY3iZeiuvfZa\nVqxYwTXXXMORRx7JCSecgJmxZs0aDj74YBYtWsT73vc+urq6OOecc7j44ov7jpTnzJnD1Vdfzemn\n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\nQmCC\n",
       "text": [
        "<matplotlib.figure.Figure at 0x7f3dde206910>"
       ]
      }
     ],
     "prompt_number": 38
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [],
     "language": "python",
     "metadata": {},
     "outputs": []
    }
   ],
   "metadata": {}
  }
 ]
}
